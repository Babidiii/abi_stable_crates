use abi_stable::{
    external_types::{RawValueRef,RawValueBox},
    nonexhaustive_enum::{
        NonExhaustiveFor,NonExhaustive,GetEnumInfo,InterfaceBound,
        DeserializeEnum,SerializeEnum,
    },
    library::RootModule,
    sabi_types::{VersionStrings},
    std_types::{RBox,RString,RResult,RStr,RBoxError,RVec},
    type_level::{
        bools::True,
        impl_enum::{Implemented,Unimplemented,IsImplemented},
        trait_marker,
    },
    sabi_trait,
    StableAbi,InterfaceType,
    package_version_strings,
    declare_root_module_statics,
    impl_InterfaceType,
};

use serde::{Deserialize,Deserializer,Serialize,Serializer};


#[repr(transparent)]
#[derive(StableAbi,Debug,Clone,Copy,PartialEq,Deserialize,Serialize)]
pub struct Cents{
    pub cents:u64,
}

#[repr(transparent)]
#[derive(StableAbi,Debug,Clone,Copy,PartialEq,Deserialize,Serialize)]
pub struct ItemId{
    #[doc(hidden)]
    pub id:usize,
}


///////////////////////////////////////////////////////////////////////////////


#[repr(u8)]
#[derive(StableAbi,Debug,Clone,PartialEq,Deserialize,Serialize)]
#[sabi(kind(WithNonExhaustive(
    size="[usize;8]",
    traits(Send,Sync,Debug,Clone,PartialEq,Serialize,Deserialize),
    assert_nonexhaustive="Command",
)))]
pub enum Command{
    #[doc(hidden)]
    #[sabi(with_constructor)]
    __NonExhaustive,
    #[sabi(with_boxed_constructor)]
    CreateItem(RBox<ParamCreateItem>),
    DeleteItem{
        id:ItemId,
    },
    AddItem{
        id:ItemId,
        count:u32,
    },
    RemoveItem{
        id:ItemId,
        count:u32,
    },
    #[cfg(feature="v1_1")]
    RenameItem{
        id:ItemId,
        new_name:RString,
    },
    #[cfg(feature="v1_1")]
    #[sabi(with_constructor)]
    Many{
        list:RVec<Command_NE>
    },
}


/*
//This was generated by the StableAbi derive macro on Command.
pub type Command_NE=
    NonExhaustive<
        Command,
        Command_Storage,
        Command_Interface,
    >;
*/

#[repr(C)]
#[derive(StableAbi,Debug,Clone,PartialEq,Deserialize,Serialize)]
pub struct ParamCreateItem{
    pub name:RString,
    pub initial_count:u32,
    pub price:Cents,
}

impl SerializeEnum<Command_NE> for Command_Interface {
    type Proxy=RawValueBox;

    fn serialize_enum(this:&Command_NE) -> Result<RawValueBox, RBoxError>{
        ShopMod::get_module().unwrap().serialize_command()(this).into_result()
    }
}

impl<'a> DeserializeEnum<'a,Command_NE> for Command_Interface{
    type Proxy=RawValueRef<'a>;
    fn deserialize_enum(s: RawValueRef<'a>) -> Result<Command_NE, RBoxError>{
        ShopMod::get_module().unwrap().deserialize_command()(s.get_rstr()).into_result()
    }
}


#[test]
#[cfg(feature="v1_1")]
fn examples_of_constructing_a_Command(){
    let id=ItemId{id:0};


    // Constructing a Command::CreateItem wrapped in NonExhaustive
    // using the constructor generated by using #[sabi(with_boxed_constructor)] on the variant.
    assert_eq!(
        Command::CreateItem_NE(ParamCreateItem{
            name:"foo".into(),
            initial_count:1,
            price:Cents{cents:1},
        }), 
        {
            let x=ParamCreateItem{
                name:"foo".into(),
                initial_count:1,
                price:Cents{cents:1},
            };
            let x=RBox::new(x);
            let x=Command::CreateItem(x);
            NonExhaustive::new(x)
        }
    );
    
    // Constructing a Command::RemoveItem wrapped in NonExhaustive 
    // without using the constructors generated using 
    // either #[sabi(with_constructor)] or #[sabi(with_boxed_constructor)],
    // since neither attribute was applied to the enum or the variant.
    {
        let x=Command::RemoveItem{id,count:1};
        let _=NonExhaustive::new(x);
    }

    // Constructing a Command::Many wrapped in NonExhaustive
    // using the constructor genereated by using #[sabi(with_constructor)] on the variant
    assert_eq!(
        Command::Many_NE(RVec::new()),
        {
            let x=Command::Many{list:RVec::new()};
            NonExhaustive::new(x)
        }
    );
}


///////////////////////////////////////////////////////////////////////////////


#[repr(u8)]
#[derive(StableAbi,Debug,Clone,PartialEq,Deserialize,Serialize)]
#[sabi(kind(WithNonExhaustive(
    size="[usize;6]",
    interface="Command_Interface",
    assert_nonexhaustive="ReturnVal",
)))]
pub enum ReturnVal{
    #[doc(hidden)]
    __NonExhaustive,
    CreateItem{
        count:u32,
        id:ItemId,
    },
    DeleteItem{
        id:ItemId,
    },
    AddItem{
        remaining:u32,
        id:ItemId,
    },
    RemoveItem{
        removed:u32,
        remaining:u32,
        id:ItemId,
    },
    #[cfg(feature="v1_1")]
    #[sabi(with_boxed_constructor)]
    RenameItem(RBox<RetRenameItem>),

    #[cfg(feature="v1_1")]
    #[sabi(with_constructor)]
    Many{
        list:RVec<ReturnVal_NE>
    },
}

/*
//This was generated by the StableAbi derive macro on ReturnVal.
pub type ReturnVal_NE=
    NonExhaustive<
        ReturnVal,
        ReturnVal_Storage,
        Command_Interface,
    >;
*/

#[cfg(feature="v1_1")]
#[repr(C)]
#[derive(StableAbi,Debug,Clone,PartialEq,Serialize,Deserialize)]
pub struct RetRenameItem{
    pub id:ItemId,
    pub new_name:RString,
    pub old_name:RString,
}

impl SerializeEnum<ReturnVal_NE> for Command_Interface {
    type Proxy=RawValueBox;

    fn serialize_enum(this:&ReturnVal_NE) -> Result<RawValueBox, RBoxError>{
        ShopMod::get_module().unwrap().serialize_ret_val()(this).into_result()
    }
}

impl<'a> DeserializeEnum<'a,ReturnVal_NE> for Command_Interface{
    type Proxy=RawValueRef<'a>;
    fn deserialize_enum(s: RawValueRef<'a>) -> Result<ReturnVal_NE, RBoxError>{
        ShopMod::get_module().unwrap().deserialize_ret_val()(s.get_rstr()).into_result()
    }
}




#[test]
#[cfg(feature="v1_1")]
fn examples_of_constructing_a_ReturnVal(){
    let id=ItemId{id:0};

    // Constructing a ReturnVal::RemoveItem wrapped in NonExhaustive 
    // without using the constructors generated using 
    // either #[sabi(with_constructor)] or #[sabi(with_boxed_constructor)],
    // since neither attribute was applied to the enum or the variant.
    {
        let x=ReturnVal::RemoveItem{removed:0,remaining:0,id};
        let _=NonExhaustive::new(x);
    }

    // Constructing a ReturnVal::RenameItem wrapped in NonExhaustive
    // using the constructor generated by using #[sabi(with_boxed_constructor)] on the variant
    assert_eq!(
        ReturnVal::RenameItem_NE(RetRenameItem{
            id,
            new_name:"foo".into(),
            old_name:"bar".into(),
        }), 
        {
            let x=RetRenameItem{
                id,
                new_name:"foo".into(),
                old_name:"bar".into(),
            };
            let x=RBox::new(x);
            let x=ReturnVal::RenameItem(x);
            NonExhaustive::new(x)
        }
    );
    
    // Constructing a ReturnVal::Many wrapped in NonExhaustive
    // using the constructor genereated by using #[sabi(with_constructor)] on the variant
    assert_eq!(
        ReturnVal::Many_NE(RVec::new()),
        {
            let x=ReturnVal::Many{list:RVec::new()};
            NonExhaustive::new(x)
        }
    );
}


///////////////////////////////////////////////////////////////////////////////


#[repr(u8)]
#[derive(StableAbi,Debug,Clone,PartialEq)]
#[sabi(kind(WithNonExhaustive(
    size="[usize;6]",
    traits(Send,Sync,Debug,Clone,PartialEq),
)))]
#[sabi(with_constructor)]
pub enum Error{
    #[doc(hidden)]
    __NonExhaustive,
    ItemAlreadyExists{
        id:ItemId,
        name:RString,
    },
    ItemIdNotFound{
        id:ItemId,
    },
    #[sabi(with_boxed_constructor)]
    InvalidCommand{
        cmd:RBox<Command_NE>,
    },
}

// Because Error has the `#[sabi(with_constructor)]` attribute applied to it,
// StableAbi generates constructor functions for each variant.
// InvalidCommand overrides it with `#[sabi(with_boxed_constructor)]`,
// which generates constructor functions for variants which wrap a pointer.
#[test]
#[cfg(feature="v1_1")]
fn examples_of_constructing_an_Error(){
    let id=ItemId{id:0};

    assert_eq!(
        Error::ItemAlreadyExists_NE(id,"hello".into()),
        {
            let x=Error::ItemAlreadyExists{id,name:"hello".into()};
            NonExhaustive::new(x)
        }
    );

    assert_eq!(
        Error::ItemIdNotFound_NE(id),
        {
            let x=Error::ItemIdNotFound{id};
            NonExhaustive::new(x)
        }
    );

    assert_eq!(
        Error::InvalidCommand_NE(Command::__NonExhaustive_NE()),
        {
            let x=Command::__NonExhaustive;
            let x=NonExhaustive::new(x);
            let x=RBox::new(x);
            let x=Error::InvalidCommand{cmd:x};
            NonExhaustive::new(x)
        }
    );
}


#[repr(C)]
#[derive(StableAbi)] 
#[sabi(kind(Prefix(prefix_struct="ShopMod")))]
#[sabi(missing_field(panic))]
pub struct ShopModVal {
    pub new:extern "C" fn()->Shop_TO<'static,RBox<()>>,

    pub deserialize_command:extern "C" fn(s:RStr<'_>)->RResult<Command_NE,RBoxError>,

    pub deserialize_ret_val:extern "C" fn(s:RStr<'_>)->RResult<ReturnVal_NE,RBoxError>,

    pub serialize_command:extern "C" fn(&Command_NE)->RResult<RawValueBox,RBoxError>,

    #[sabi(last_prefix_field)]
    pub serialize_ret_val:extern "C" fn(&ReturnVal_NE)->RResult<RawValueBox,RBoxError>,
}


impl RootModule for ShopMod {
    declare_root_module_statics!{ShopMod}
    const BASE_NAME: &'static str = "shop";
    const NAME: &'static str = "shop";
    const VERSION_STRINGS: VersionStrings = package_version_strings!();
}



#[sabi_trait]
pub trait Shop{
    #[sabi(last_prefix_field)]
    fn run_command(
        &mut self,
        cmd:Command_NE,
    ) -> RResult<ReturnVal_NE,NonExhaustiveFor<Error>>;
}



